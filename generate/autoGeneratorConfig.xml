<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>

    <!--id:必选，上下文id，用于在生成错误时提示-->
    <!--<context id="mysql" targetRuntime="MyBatis3">-->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="conditional">

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--分割符合-->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <!--<property name="mappers" value="${mapper.Mapper}"/>-->
            <property name="mappers" value="com.tbp.spring.boot.mybatis.template.mapper.BaseMapper"/>
            <!--
                增加 model 代码生成时
                可以直接生成 lombok 的 @Getter@Setter@ToString@Accessors(chain = true) 四类注解，
                使用者在插件配置项中增加
                <property name="lombok" value="Getter,Setter,ToString,Accessors"/>
                即可生成对应包含注解的 model 类
            -->
            <property name="lombok" value="Data"/>
            <!--
            是否区分大小写，默认值 false。如果数据库区分大小写，
            这里就需要配置为 true，这样当表名为 USER 时，
            会生成 @Table(name = "USER") 注解，
            否则使用小写 user 时会找不到表。
            -->
            <property name="caseSensitive" value="false"/>
            <!--是否强制生成注解，默认 false 生成注解（包含 @Table 和 @Column） -->
            <property name="forceAnnotation" value="true"/>
            <!--<property name="beginningDelimiter" value="`"/>-->
            <!--<property name="endingDelimiter" value="`"/>-->
            <!--是否使用通用 Mapper 提供的注释工具，默认 true 使用-->
            <property name="useMapperCommentGenerator " value="true"/>
        </plugin>
        <!-- 生成 JavaBean 对象重写 toString方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />-->
        <!-- 生成 JavaBean 对象继承 Serializable 类 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"></plugin>-->

        <!-- 此处是将UserMapper.xml改名为UserDao.xml -->
        <!--<plugin type="org.mybatis.generator.plugins.RenameSqlMapperPlugins">-->
            <!--<property name="searchString" value="Mapper" />-->
            <!--<property name="replaceString" value="Dao" />-->
        <!--</plugin>-->

        <!--&lt;!&ndash; 此处是将UserMapper改名为UserDao 接口  &ndash;&gt;-->
        <!--<plugin type="org.mybatis.generator.plugins.RenameJavaMapperPlugins">-->
            <!--<property name="searchString" value="Mapper$" />-->
            <!--<property name="replaceString" value="Dao" />-->
        <!--</plugin>-->

        <!-- 对注释进行控制 -->
        <commentGenerator>
            <!-- suppressDate是去掉生成日期那行注释 -->
            <property name="suppressDate" value="true"/>
            <!-- suppressAllComments是去掉所有的注解 -->
            <property name="suppressAllComments" value="false"/>
            <!--添加数据库注释-->
            <property name="addRemarkComments" value="true"/>
            <property name="javaFileEncoding" value="utf-8"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://127.0.0.1:3306/tian"
                userId="root"
                password="123456">
        </jdbcConnection>

        <!-- java类型处理器
        用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
        注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- java模型创建器，是必须要的元素
            负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="com.tbp.spring.boot.mybatis.template.entity" targetProject="src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- 是否对model添加 构造函数 -->
            <!--<property name="constructorBased" value="true"/>-->
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，
                所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
         -->
        <sqlMapGenerator targetPackage="mybatis" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>


        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.tbp.spring.boot.mybatis.template.mapper"
                             type="XMLMAPPER"
                             targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            tableName（必要）：要生成对象的表名；
            domainObjectName 给表对应的 model 起名字
            注意：大小写敏感问题。
         -->
        <table tableName="t_user" domainObjectName="UserEntity"
               enableSelectByPrimaryKey="false"
               enableUpdateByPrimaryKey="false"
               enableDeleteByPrimaryKey="false"
               enableUpdateByExample="false"
               enableInsert="false"

        >

            <!--用来修改表中某个列的属性,一个table元素中可以有多个columnOverride元素哈.
                property属性来指定列要生成的属性名称.
             -->
            <!--<columnOverride column="username" property="userName" />-->
            <!--重命名-->
            <!--<columnRenamingRule searchString="^CUST_" replaceString="" />-->
            <!--主键生产-->
            <!--<generatedKey column="id" sqlStatement="Mysql" identity="true"/>-->
        </table>


        <!-- sql占位符，表示所有的表 -->
        <!--<table tableName="%">-->
        <!--<generatedKey column="epa_id" sqlStatement="Mysql" identity="true"/>-->
        <!--</table>-->
        <!--<table tableName="person" domainObjectName="Person"/>-->
        <!--<table tableName="department" domainObjectName="Depart"/>-->

    </context>

</generatorConfiguration>