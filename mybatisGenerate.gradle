
configurations {
    mybatisGenerator
}

dependencies {
//    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.4.0'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.45'
    mybatisGenerator 'tk.mybatis:mapper:3.3.2'
}


def getDbProperties = {
    def properties = new Properties()
//    file("src/main/resources/mybatis/jdbc.properties").withInputStream { inputStream ->
    file("generate/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    print(properties)
    properties
}


task mybatisGenerate {
    doFirst {
        println 'task in do first'  //运行任务时，会第一个执行
    }

    doLast {
        println 'task in do last'   //运行任务时，会最后一个执行
    }

    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    println("=======> ")
    ant.mbgenerator(overwrite: true,
//            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
            configfile: 'generate/generatorConfig.xml',
            verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}